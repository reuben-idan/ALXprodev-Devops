#!/bin/bash

# Parallel Pokémon Data Retrieval Script
# Fetches data for multiple Pokémon in parallel using background processes
# Uses 'jobs' and 'kill' for process management

POKEMON_LIST=(bulbasaur ivysaur venusaur charmander charmeleon)
API_URL="https://pokeapi.co/api/v2/pokemon"
DATA_DIR="pokemon_data"
MAX_CONCURRENT=3 # Maximum number of parallel processes
ERROR_LOG="pokemon_parallel_errors.log"

# Create the data directory if it doesn't exist
mkdir -p "$DATA_DIR"

# Initialize error log
echo "Parallel Pokémon API Error Log - $(date)" > "$ERROR_LOG"

# Function to fetch a single Pokémon
fetch_pokemon() {
    local name=$1
    local outfile="$DATA_DIR/$name.json"
    
    echo "Starting fetch for $name..."
    
    if curl -s -f "$API_URL/$name" -o "$outfile" 2>/dev/null; then
        echo "✅ Successfully fetched $name"
        return 0
    else
        echo "❌ Failed to fetch $name"
        echo "$(date): Failed to fetch $name" >> "$ERROR_LOG"
        return 1
    fi
}

# Function to manage parallel processes using jobs
fetch_parallel() {
    local job_count=0
    
    for name in "${POKEMON_LIST[@]}"; do
        # Check current number of background jobs
        job_count=$(jobs -r | wc -l)
        
        # Wait if we've reached the maximum concurrent jobs
        while [ $job_count -ge $MAX_CONCURRENT ]; do
            echo "Maximum concurrent jobs reached ($MAX_CONCURRENT). Waiting..."
            sleep 1
            job_count=$(jobs -r | wc -l)
        done
        
        # Start background job
        fetch_pokemon "$name" &
        echo "Launched background job for $name (Job ID: $!)"
        echo "Current background jobs:"
        jobs
    done
    
    # Wait for all background jobs to complete
    echo "Waiting for all background jobs to complete..."
    wait
    
    echo "All background jobs completed!"
    echo "Final job status:"
    jobs
}

# Cleanup function to kill any remaining background jobs
cleanup() {
    echo "Cleaning up any remaining background jobs..."
    jobs -p | xargs -r kill
    echo "Cleanup completed."
}

# Set up trap to cleanup on script exit
trap cleanup EXIT

echo "Starting parallel Pokémon data fetch..."
echo "Maximum concurrent jobs: $MAX_CONCURRENT"
echo ""

# Execute parallel fetching
fetch_parallel

echo ""
echo "All parallel processes completed!"
echo "Check $ERROR_LOG for any errors."
echo "Data files saved in $DATA_DIR/" 